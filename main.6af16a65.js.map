{"version":3,"sources":["src/assets/samples/tr808/index.ts","src/main.ts"],"names":[],"mappings":"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","file":"main.6af16a65.js","sourceRoot":"..","sourcesContent":["import hiCongaSrc from './conga_hi.wav'\nimport lowCongaSrc from './conga_low.wav'\nimport midCongaSrc from './conga_mid.wav'\nimport cowbellSrc from './cowbell.wav'\nimport cymbalSrc from './cymbal.wav'\nimport closeHatSrc from './hat_close.wav'\nimport openHatSrc from './hat_open.wav'\nimport kickSrc from './kick.wav'\nimport snareSrc from './snare.wav'\nimport clapSrc from './clap.wav'\n\nexport const hiConga: string = hiCongaSrc\nexport const lowConga: string = lowCongaSrc\nexport const midConga: string = midCongaSrc\nexport const cowbell: string = cowbellSrc\nexport const cymbal: string = cymbalSrc\nexport const closeHat: string = closeHatSrc\nexport const openHat: string = openHatSrc\nexport const kick: string = kickSrc\nexport const snare: string = snareSrc\nexport const clap: string = clapSrc\n","import { closeHat, hiConga, cowbell, snare, kick, lowConga } from './assets/samples/tr808/index'\n\nfunction pad (n: string, width: number): string {\n  return n.length >= width ? n : new Array(width - n.length + 1).join('0') + n\n}\n\nfunction color2rythm (colorHex: string): Array<boolean> {\n  const hex: string = colorHex.replace('#', '')\n  const bin: string = parseInt(hex, 16).toString(2).padStart(8, '0')\n  return pad(bin, 24).split('').map(val => val === '1')\n}\n\nclass Sequencer {\n  private bpm: number = 120\n  private interval: number\n  public sequences: Array<{ pattern: Array<boolean>, sample: HTMLAudioElement }> = []\n  public currentStep: number = 0\n\n  constructor (sequences: Array<{ pattern: Array<boolean>, sampleSrc: string }>, tempo: number = 120) {\n    this.sequences = sequences.map(sequence => ({\n      pattern: sequence.pattern,\n      sample: new Audio(sequence.sampleSrc)\n    }))\n    this.bpm = tempo\n  }\n\n  public play (callback: (number) => void): void {\n    this.currentStep = 0\n    clearInterval(this.interval)\n    this.interval = setInterval(() => {\n      callback(this.currentStep)\n      this.step()\n    }, (60 * 1000) / this.bpm)\n  }\n\n  public updatePattern (sequenceIndex: number, newPattern: Array<boolean>): void {\n    if (this.sequences[sequenceIndex]) {\n      this.sequences[sequenceIndex].pattern = newPattern\n    }\n  }\n\n  private step (): void {\n    this.sequences.forEach(sequence => {\n      const shouldPlay = sequence.pattern[this.currentStep]\n\n      if (shouldPlay) {\n        // new Audio(sequence.sample.src).pause()\n        // sequence.sample.currentTime = 0\n        new Audio(sequence.sample.src).play()\n      }\n    })\n\n    this.currentStep = (this.currentStep + 1) % this.sequences[0].pattern.length\n  }\n}\n\nconst sequences = [\n  { color: '#000000', sample: kick },\n  { color: '#000000', sample: closeHat },\n  { color: '#000000', sample: snare },\n  { color: '#000000', sample: cowbell },\n  { color: '#000000', sample: hiConga },\n  { color: '#000000', sample: lowConga }\n]\n\nconst seq = new Sequencer(sequences.map(s => ({ pattern: color2rythm(s.color), sampleSrc: s.sample })), 400)\n\nconst inputsWrapper = document.createElement('div')\nseq.sequences.forEach((_sequence, i) => {\n  const input = document.createElement('input')\n  input.setAttribute('type', 'color')\n  input.value = sequences[i].color\n\n  inputsWrapper.append(input)\n  input.addEventListener('change', () => {\n    seq.updatePattern(i, color2rythm(input.value))\n    sequences[i].color = input.value\n  })\n})\ndocument.body.append(inputsWrapper)\n\nconst canvas = document.createElement('canvas')\nconst ctx = canvas.getContext('2d')\n\nconst physicalScl = 30\nconst scl = physicalScl * devicePixelRatio\ncanvas.style.height = physicalScl * seq.sequences.length + 'px'\ncanvas.style.widows = physicalScl * seq.sequences[0].pattern.length + 'px'\ncanvas.height = scl * seq.sequences.length\ncanvas.width = scl * seq.sequences[0].pattern.length\n\nfunction draw (sequencerInstance: Sequencer, currentStep: number): void {\n  ctx.clearRect(0, 0, canvas.width, canvas.height)\n  sequencerInstance.sequences.forEach((sequence, y) => {\n    sequence.pattern.forEach((step, x) => {\n      ctx.fillStyle = step ? sequences[y].color : '#eceff1'\n      const margin = x === currentStep ? 10 : 2\n      ctx.fillRect(x * scl + margin, y * scl + margin, scl - 2 * margin, scl - 2 * margin)\n    })\n  })\n}\n\ndraw(seq, 0)\n\ndocument.body.append(canvas)\n\ndocument.querySelector('button').addEventListener('click', () => {\n  seq.play(currentStep => {\n    draw(seq, currentStep)\n  })\n})\n"]}